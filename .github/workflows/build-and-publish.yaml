name: Build and Publish Docker Image

on:
  workflow_dispatch:
    branches:
      - main

permissions:
  contents: read

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  IMAGE_NAME: camillehe1992/strapi
  # Common Env Variables
  AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
  AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
  AWS_ACCOUNT: "${{ vars.AWS_ACCOUNT }}"
  AWS_REGION: "${{ vars.AWS_REGION }}"

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-publish:
    name: Build & Publish Docker Image
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      gitVersion: ${{ steps.tag-version.outputs.new_version }}
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: write
      packages: write
      checks: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Bump version and push tag
        id: tag-version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # ESLint and Prettier must be in `package.json`
      - name: Install Node.js Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Run Linters
        uses: wearerequired/lint-action@v2
        with:
          eslint: true
          prettier: true

      - name: Run Unit Test (Jest)
        uses: borales/actions-yarn@v4
        with:
          cmd: test

      - # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: ./Dockerfile.prod
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ steps.tag-version.outputs.new_version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
